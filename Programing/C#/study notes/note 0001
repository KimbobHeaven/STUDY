using System;
class GlazerCalc
{
    static void Main()
    {
        double width, height, woodLength, glassArea;
        string widthString, heightString;
        widthString = Console.ReadLine();
        width = double.Parse(widthString);
        heightString = Console.ReadLine();
        height double.Parse(heightString);
        woodLength = 2 * (width + height) * 3.25;
        glassArea = 2 * (width * height);
        Console.WriteLine("The length of the wood is" + woodLength + "feet");
        Console.WriteLine("The area of the glass is" + glassArea + "square metres");
    }
}

----------

using System;
// 컴파일러에게 System 네임스페이스(namespace)를 사용하고자 함을 알림. 네임스페이스는 프로그램에 필요한 많은 기능들을 가진것을 의미

class GlazerCalc
// C#은 하나이상의 클래스(Class)로 구성됨. 각 클래스마다 식별자(identifier)를 붙일 수 있음, 식별자의 이름은 하는일을 반영
// 파일명이 특정 클래스를 갖고 있을때 그 이름을 클래스명으로함. ex) GlazerCalc.cs

static
// 메소드가 메모리에 상주하는것을 나타냄. static 키워드는 클래스 내의 일부분이며 항상 존재함

void
// 메소드가 아무것도 반환하지 않았다는것을 의미.

Main
// Main 메소드(반드시 하나)는 프로그램 동작의 시작점임.

()
// 파라미터를 가지지 않은것을 컴파일러에게 알려줌.

{}
// 프로그램을 묶는것을 블록이라고함.

double
// 부동 소수점을 의미. 지수부 11비트, 가수부 52비트. 배정도 부동소수점이 정식명칭이 단정도(Float)보다 2배 크기의 데이터를 가지기에 배정도라고함
// C#은 부동소수점, 정수형, 텍스트와 같은 세가지의 데이터를 다룸

;
// 변수명 리스트의 마지막, 선언문 마지막에 붙임

string
// 문자열을 의미. 사용자의 입력도 문자열로 읽음.

=
// 오른쪽 식의 값에따라 왼쪽에 나타난 값을 치환하기위한 할당문. goes into 를 줄여 gozzinta 라고도함.

ReadLine
// 인풋역할의 메소드.

Parse
// 문자열을 double로 변경하는 메소드. 해당프로그램에서 double.이라고 명시해서그런가..

+, *
// 연산자. 다른 항들을 피연산자라고함.

WriteLine
// 아웃풋 역할의 메소드

" "
// 문자열 리터럴. 문장이나 텍스트를 표현하기 위해 사용.

context
// 같은 연산자라도 맥락에 따라서 의미가 달라질 수 있음


